{
  "version": 3,
  "sources": ["../../../../../../r/RobotBuildersInc/website/.netlify/functions-internal/emails/index.js"],
  "sourceRoot": "C:/Users/kingp/AppData/Local/Temp/tmp-6280-yqWEhLx95bPr",
  "sourcesContent": ["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.handler = exports.getEmailFromPath = void 0;\nconst fs_1 = __importDefault(require(\"fs\"));\nconst path_1 = require(\"path\");\nconst https_1 = __importDefault(require(\"https\"));\nconst getEmailFromPath = (path) => {\n    let fileFound;\n    fs_1.default.readdirSync(path).forEach((file) => {\n        if (fileFound !== undefined) {\n            // break after getting first file\n            return;\n        }\n        const fileType = file.split(\".\").pop();\n        const filename = file.replace(/^.*[\\\\/]/, \"\").split(\".\")[0];\n        if (filename === \"index\") {\n            if (fileType === \"mjml\" || fileType === \"html\") {\n                const fileContents = fs_1.default.readFileSync(`${path}/${file}`, \"utf8\");\n                fileFound = { file: fileContents, type: fileType };\n            }\n        }\n    });\n    return fileFound;\n};\nexports.getEmailFromPath = getEmailFromPath;\nconst allowedPreviewEnvironments = [\"deploy-preview\", \"branch-deploy\", \"dev\"];\nconst getMissingConfig = () => {\n    var _a;\n    const missingConfig = {};\n    let validConfig = true;\n    if (!process.env.NETLIFY_EMAILS_PROVIDER) {\n        missingConfig.NETLIFY_EMAILS_PROVIDER = true;\n        validConfig = false;\n    }\n    if (!process.env.NETLIFY_EMAILS_PROVIDER_API_KEY) {\n        missingConfig.NETLIFY_EMAILS_PROVIDER_API_KEY = true;\n        validConfig = false;\n    }\n    if (((_a = process.env.NETLIFY_EMAILS_PROVIDER) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === \"mailgun\") {\n        if (!process.env.NETLIFY_EMAILS_MAILGUN_HOST_REGION) {\n            missingConfig.NETLIFY_EMAILS_MAILGUN_HOST_REGION = true;\n            validConfig = false;\n        }\n        if (!process.env.NETLIFY_EMAILS_MAILGUN_DOMAIN) {\n            missingConfig.NETLIFY_EMAILS_MAILGUN_DOMAIN = true;\n            validConfig = false;\n        }\n    }\n    if (!process.env.NETLIFY_EMAILS_SECRET) {\n        missingConfig.NETLIFY_EMAILS_SECRET = true;\n        validConfig = false;\n    }\n    return validConfig ? false : missingConfig;\n};\nconst makeRenderTemplateRequest = (fileFound, parameters) => __awaiter(void 0, void 0, void 0, function* () {\n    const renderRequest = {\n        template: fileFound.file,\n        siteId: process.env.SITE_ID,\n        type: fileFound.type,\n        showParameterDictionary: false,\n        parameters,\n    };\n    return yield new Promise((resolve, reject) => {\n        const renderReq = https_1.default.request({\n            hostname: \"netlify-integration-emails.netlify.app\",\n            path: \"/.netlify/functions/render\",\n            method: \"POST\",\n            headers: {\n                \"site-id\": process.env.SITE_ID,\n                \"Content-Type\": \"application/json\",\n            },\n        }, (res) => {\n            let data = \"\";\n            res.on(\"data\", (chunk) => {\n                // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n                data += chunk;\n            });\n            res.on(\"end\", () => {\n                var _a;\n                const response = JSON.parse(data);\n                resolve(Object.assign(Object.assign({}, response), { status: (_a = res.statusCode) !== null && _a !== void 0 ? _a : 500 }));\n            });\n        });\n        renderReq.on(\"error\", (error) => {\n            return reject(error);\n        });\n        renderReq.write(JSON.stringify(renderRequest));\n        renderReq.end();\n    });\n});\nconst makeSendEmailRequest = (mailRequest) => __awaiter(void 0, void 0, void 0, function* () {\n    return yield new Promise((resolve, reject) => {\n        const sendReq = https_1.default.request({\n            hostname: \"netlify-integration-emails.netlify.app\",\n            path: \"/.netlify/functions/send\",\n            method: \"POST\",\n            headers: {\n                \"site-id\": process.env.SITE_ID,\n                \"Content-Type\": \"application/json\",\n            },\n        }, (res) => {\n            let data = \"\";\n            res.on(\"data\", (chunk) => {\n                // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n                data += chunk;\n            });\n            res.on(\"end\", () => {\n                var _a;\n                const response = JSON.parse(data);\n                const sendEmailResponse = {\n                    message: response.message,\n                    status: (_a = res.statusCode) !== null && _a !== void 0 ? _a : 500,\n                };\n                resolve(sendEmailResponse);\n            });\n        });\n        sendReq.on(\"error\", (error) => {\n            return reject(error);\n        });\n        sendReq.write(JSON.stringify(mailRequest));\n        sendReq.end();\n    });\n});\nconst handler = (event) => __awaiter(void 0, void 0, void 0, function* () {\n    var _a, _b, _c, _d;\n    console.log(`Email handler received email request from path ${event.rawUrl}`);\n    const missingConfig = getMissingConfig();\n    const providerApiKey = process.env.NETLIFY_EMAILS_PROVIDER_API_KEY;\n    const providerName = process.env.NETLIFY_EMAILS_PROVIDER;\n    const emailTemplatesDirectory = (_a = process.env.NETLIFY_EMAILS_DIRECTORY) !== null && _a !== void 0 ? _a : \"./emails\";\n    const emailPath = (_b = event.rawUrl.match(/emails\\/([A-z-]*)[?]?/)) === null || _b === void 0 ? void 0 : _b[1];\n    // If missing configuration, render preview HTML and sending missing configuration object to window varialbe\n    if (missingConfig) {\n        const missingConfigString = Object.keys(missingConfig)\n            .map((key) => {\n            if (missingConfig[key]) {\n                return key;\n            }\n            return \"\";\n        })\n            .join(\", \");\n        console.error(`Email handler detected missing configuration: ${missingConfigString}`);\n        if (event.httpMethod === \"POST\") {\n            return {\n                statusCode: 400,\n                body: JSON.stringify({\n                    message: `The emails integration is not configured correctly. We have detected the following configuration is missing: ${missingConfigString}`,\n                }),\n            };\n        }\n        return {\n            statusCode: 200,\n            body: `\n          <html>\n            <head>\n            <link rel=\"stylesheet\" href=\"https://netlify-integration-emails.netlify.app/main.css\">\n            <script>\n              missingConfig = ${JSON.stringify(missingConfig)}\n              siteId = ${JSON.stringify(process.env.SITE_ID)}\n              templateName = ${JSON.stringify(emailPath)}\n            </script>\n            <script defer src='https://netlify-integration-emails.netlify.app/index.js'></script>\n            </head>\n            <div id='app'></div>\n          </html>\n          `,\n        };\n    }\n    if (event.httpMethod === \"GET\") {\n        const showEmailPreview = allowedPreviewEnvironments.includes(process.env.CONTEXT);\n        if (!showEmailPreview) {\n            return {\n                statusCode: 400,\n                body: JSON.stringify({\n                    message: `Email previews are not allowed in the ${process.env.CONTEXT} environment`,\n                }),\n                headers: {\n                    \"Content-Type\": \"text/plain\",\n                },\n            };\n        }\n        if (!fs_1.default.existsSync(emailTemplatesDirectory)) {\n            return {\n                statusCode: 400,\n                body: JSON.stringify({\n                    message: `Email templates directory ${emailTemplatesDirectory} does not exist`,\n                }),\n                headers: {\n                    \"Content-Type\": \"text/plain\",\n                },\n            };\n        }\n        let emailTemplate;\n        if (emailPath !== undefined) {\n            if (!fs_1.default.existsSync((0, path_1.join)(emailTemplatesDirectory, emailPath))) {\n                console.log(`Preview path is not a valid email path - preview path received: ${emailPath}`);\n                return {\n                    statusCode: 200,\n                    body: `\n              <html>\n                <head>\n                <link rel=\"stylesheet\" href=\"https://netlify-integration-emails.netlify.app/main.css\">\n                <script>\n                  missingTemplate = ${JSON.stringify(true)}\n                  siteId = ${JSON.stringify(process.env.SITE_ID)}\n                  templateName = ${JSON.stringify(emailPath)}\n                  emailDirectory = ${JSON.stringify(emailTemplatesDirectory)}\n                </script>\n                <script defer src='https://netlify-integration-emails.netlify.app/index.js'></script>\n                </head>\n                <div id='app'></div>\n              </html>\n              `,\n                    headers: {\n                        \"Content-Type\": \"text/html\",\n                    },\n                };\n            }\n            emailTemplate = (0, exports.getEmailFromPath)((0, path_1.join)(emailTemplatesDirectory, emailPath));\n            if (!emailTemplate) {\n                console.log(`No email template found for preview path - preview path received: ${emailPath}. Please ensure that an index.mjml or index.html file exists in the email template folder.`);\n                return {\n                    statusCode: 200,\n                    body: `\n              <html>\n                <head>\n                <link rel=\"stylesheet\" href=\"https://netlify-integration-emails.netlify.app/main.css\">\n                <script>\n                  missingTemplate = ${JSON.stringify(true)}\n                  siteId = ${JSON.stringify(process.env.SITE_ID)}\n                  templateName = ${JSON.stringify(emailPath)}\n                  emailDirectory = ${JSON.stringify(emailTemplatesDirectory)}\n                </script>\n                <script defer src='https://netlify-integration-emails.netlify.app/index.js'></script>\n                </head>\n                <div id='app'></div>\n              </html>\n              `,\n                    headers: {\n                        \"Content-Type\": \"text/html\",\n                    },\n                };\n            }\n        }\n        const validEmailPaths = [];\n        fs_1.default.readdirSync(emailTemplatesDirectory).forEach((template) => {\n            if (fs_1.default.existsSync((0, path_1.join)(emailTemplatesDirectory, template, \"index.html\")) ||\n                fs_1.default.existsSync((0, path_1.join)(emailTemplatesDirectory, template, \"index.mjml\"))) {\n                validEmailPaths.push(template);\n            }\n        });\n        return {\n            statusCode: 200,\n            body: `\n        <html>\n          <head>\n          <link rel=\"stylesheet\" href=\"https://netlify-integration-emails.netlify.app/main.css\">\n          <script>\n            emailPaths =  ${JSON.stringify(validEmailPaths)}\n            template = ${JSON.stringify(emailTemplate === null || emailTemplate === void 0 ? void 0 : emailTemplate.file)}\n            templateType = ${JSON.stringify(emailTemplate === null || emailTemplate === void 0 ? void 0 : emailTemplate.type)}\n            siteId = ${JSON.stringify(process.env.SITE_ID)}\n            siteName = ${JSON.stringify(process.env.SITE_NAME)}\n            provider = ${JSON.stringify(providerName)}\n            emailDirectory = ${JSON.stringify(emailTemplatesDirectory)}\n            secret = ${JSON.stringify(process.env.NETLIFY_EMAILS_SECRET)}\n            url = ${JSON.stringify(process.env.URL)}\n            templateName = ${JSON.stringify(emailPath)}\n          </script>\n          <script defer src='https://netlify-integration-emails.netlify.app/index.js'></script>\n          </head>\n          <div id='app'></div>\n        </html>\n        `,\n            headers: {\n                \"Content-Type\": \"text/html\",\n            },\n        };\n    }\n    if (event.httpMethod === \"POST\") {\n        if (!process.env.NETLIFY_EMAILS_SECRET) {\n            return {\n                statusCode: 400,\n                body: JSON.stringify({\n                    message: \"Secret not set in NETLIFY_EMAILS_SECRET\",\n                }),\n            };\n        }\n        if (event.headers[\"netlify-emails-secret\"] !==\n            process.env.NETLIFY_EMAILS_SECRET) {\n            return {\n                statusCode: 403,\n                body: JSON.stringify({\n                    message: \"Secret does not match\",\n                }),\n            };\n        }\n        // If the email templates directory does not exist, return error\n        if (!fs_1.default.existsSync(emailTemplatesDirectory)) {\n            return {\n                statusCode: 404,\n                body: JSON.stringify({\n                    message: `Email templates directory ${emailTemplatesDirectory} does not exist`,\n                }),\n            };\n        }\n        if (!event.body) {\n            return {\n                statusCode: 400,\n                body: JSON.stringify({\n                    message: \"Request body required\",\n                }),\n            };\n        }\n        const requestBody = JSON.parse(event.body);\n        if (!requestBody.from) {\n            console.log(\"From address is required\");\n            return {\n                statusCode: 400,\n                body: JSON.stringify({\n                    message: \"From address is required\",\n                }),\n            };\n        }\n        if (!requestBody.to) {\n            console.log(\"To address is required\");\n            return {\n                statusCode: 400,\n                body: JSON.stringify({\n                    message: \"To address is required\",\n                }),\n            };\n        }\n        if (!emailPath) {\n            console.error(`Email path is not specified`);\n            return {\n                statusCode: 400,\n                body: JSON.stringify({\n                    message: \"You have not specified the email you wish to send in the URL\",\n                }),\n            };\n        }\n        const fullEmailPath = `${emailTemplatesDirectory}/${emailPath}`;\n        const emailPathExists = fs_1.default.existsSync(fullEmailPath);\n        if (!emailPathExists) {\n            console.error(`Email path does not exist: ${fullEmailPath}`);\n            return {\n                statusCode: 404,\n                body: JSON.stringify({\n                    message: `Email path ${fullEmailPath} does not exist`,\n                }),\n            };\n        }\n        const email = (0, exports.getEmailFromPath)(fullEmailPath);\n        if (!email) {\n            console.error(`No email file found in directory: ${fullEmailPath}`);\n            return {\n                statusCode: 404,\n                body: JSON.stringify({\n                    message: `No email file found in directory: ${fullEmailPath}`,\n                }),\n            };\n        }\n        const renderResponseJson = yield makeRenderTemplateRequest(email, requestBody.parameters);\n        if ((_c = renderResponseJson.error) !== null && _c !== void 0 ? _c : !renderResponseJson.html) {\n            console.error(`Error rendering email template: ${JSON.stringify(renderResponseJson)}`);\n            return {\n                statusCode: renderResponseJson.status,\n                body: JSON.stringify({\n                    message: `Error rendering email template${renderResponseJson.error ? `: ${renderResponseJson.error}` : \"\"}`,\n                }),\n            };\n        }\n        const renderedTemplate = renderResponseJson.html;\n        const configuration = {\n            providerName,\n            apiKey: providerApiKey,\n            mailgunDomain: process.env.NETLIFY_EMAILS_MAILGUN_DOMAIN,\n            mailgunHostRegion: process.env.NETLIFY_EMAILS_MAILGUN_HOST_REGION,\n        };\n        const request = {\n            from: requestBody.from,\n            to: requestBody.to,\n            cc: requestBody.cc,\n            bcc: requestBody.bcc,\n            subject: (_d = requestBody.subject) !== null && _d !== void 0 ? _d : \"\",\n            html: renderedTemplate,\n            attachments: requestBody.attachments,\n        };\n        const { message, status } = yield makeSendEmailRequest({\n            configuration,\n            request,\n        });\n        if (status !== 200) {\n            console.error(`Error sending email: ${message}`);\n        }\n        return {\n            statusCode: status,\n            body: JSON.stringify({\n                message,\n            }),\n        };\n    }\n    return {\n        statusCode: 405,\n        body: JSON.stringify({\n            message: \"Method not allowed\",\n        }),\n    };\n});\nexports.handler = handler;\n"],
  "mappings": "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",
  "names": []
}
